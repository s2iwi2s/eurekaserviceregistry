application.version: 1.0B

app:
  login:
    eureka:
      username: EUREKA
      password: EUREKA_ADMIN
    admin:
      username: admin
      password: admin


spring:
  application:
    name: eurekaserviceregistry
  security:
    user:
      name: ${app.login.admin.username}
      password: ${app.login.admin.password}
#  boot:
#    admin:
#      client:
#        instance:
#          name: ${spring.application.name}-monitor
#          metadata:
#            user.name: ${spring.security.user.name}
#            user.password: ${spring.security.user.password}
#        username: ${spring.security.user.name}
#        password: ${spring.security.user.password}
#      ui:
#        enable-toasts: true
#        title: Application Monitor
  output:
    ansi:
      enabled: always

spring.boot.admin:
  discovery:
    enabled: true
  client:
    instance:
      name: ${spring.application.name}-monitor
      metadata:
        user.name: ${spring.security.user.name}
        user.password: ${spring.security.user.password}
    username: ${spring.security.user.name}
    password: ${spring.security.user.password}
  ui:
    enable-toasts: true
    title: Application Monitor

eureka:
  instance:
    health-check-url-path: /actuator/health
    instance-id: ${spring.application.name}:${random.uuid}
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 5
    metadata-map:
      startup: ${random.int}
    prefer-ip-address: true
  client:
    enabled: true
    fetch-registry: true
    register-with-eureka: false
    initial-instance-info-replication-interval-seconds: 5
    instance-info-replication-interval-seconds: 10
    registry-fetch-interval-seconds: 10
    server:
      waitTimeInMsWhenSyncEmpty: 0

management:
  info:
    env:
      enabled: true
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
    env:
      keys-to-sanitize: password,secret
      show-values: WHEN_AUTHORIZED
    configprops:
      show-values: WHEN_AUTHORIZED
  endpoint:
    enabled-by-default: true
    refresh:
      enabled: true
    restart:
      enabled: false
    shutdown:
      enabled: true
    info:
      enabled: true
      show-values: WHEN_AUTHORIZED
    env:
      keys-to-sanitize: password,secret
      show-values: WHEN_AUTHORIZED
      post:
        enabled: true
    health:
      show-details: WHEN_AUTHORIZED
    configprops:
      show-values: WHEN_AUTHORIZED


#  spring.boot.admin.client.url=http://localhost:8080
#  management.endpoints.web.exposure.include=*
#  management.info.env.enabled: true

logging:
  file:
    name: /var/log/${spring.application.name}.log
  pattern:
    console: "%black(%d{ISO8601}) %highlight(%-5level) %yellow(%c{2}): %msg%n%throwable"
    file: "%black(%d{ISO8601}) %highlight(%-5level) %yellow(%c{2}): %msg%n%throwable"
#    file: "%black(%d{ISO8601}) %highlight(%-5level) %yellow(%C{1}): %msg%n%throwable"
#    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"
#    file: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"
#    file: "%d %-5level %C{1}: %msg%n"
